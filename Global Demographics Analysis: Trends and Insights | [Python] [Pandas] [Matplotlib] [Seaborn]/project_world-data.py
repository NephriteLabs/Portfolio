# -*- coding: utf-8 -*-
"""Denys-Bukariev_Week-6_Capstone-Project_24-04-2024.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-LocxRMG0xTz6mm8lHLnajO4vpejb38k
"""

# importing libraries in python

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings

# importing data from Excel file "world_population" into a DataFrame

df_excel = pd.read_excel('world_population.xlsx', sheet_name='world_population')

# reading data from a CSV file into a DataFrame
# df_csv = pd.read_csv('data.csv')

# adding DataFrame to the table together with the formatting specs

df = pd.DataFrame(df_excel)
pd.set_option('display.expand_frame_repr', False) # expanding the table to show it in one row
pd.set_option('display.max_colwidth', 20)  # set maximum column width to 40 characters
print(df)

# displaying the first 30 rows of the DataFrame using head function

print(df.head(30))

# displaying the last 20 rows of the DataFrame using tail function

print(df.tail(20))

# summary statistics of numerical columns in the dataset using describe function

print(df.describe())

# accessing a Capital column

name_column = df['Capital']
print(name_column)

# accessing row using .loc[]

row_31 = df.loc[30]
pd.set_option('display.max_colwidth', None)  # show full content of columns
print(row_31)

# accessing value in the Country column using .loc[]

column = 'Country'
index = 26
country_value = df.loc[index, column]
print(f"Accessing the {column} value of the row with index {index}:")
print() # adding a blank line for formatting purposes
print(country_value)

# accessing row using .iloc[]

row_112 = df.iloc[111]
print(row_112)

# finding 2022th population for the country ranking 18 using .iloc[]

row_index = df[df['Rank'] == 18].index[0] # locating the index of the row where the 'Rank' column has the value 18
population_value = df.at[row_index, 2022] # getting the value of the '2020' column for the country ranking 18th

# getting info on population for the chosen country
population_info = df.iloc[row_index]

print(population_info)
print()
print("Population in 2022:", population_value)

# selecting Capital column using square brackets

name_column = df['Capital']
print("Selected Capital column:")
print()
print(name_column)

# selecting multiple columns, Country and Capital

selected_columns = df[['Country', 'Capital']]
print("\nSelected Country and Capital columns:")
pd.set_option('display.max_colwidth', None)  # show full content of columns
print()
print(selected_columns)

# selecting multiple rows with indices 30 and 41

selected_rows_loc = df.loc[[30, 41]]
print("\nSelected rows with indices 30 and 41 using .loc[]:")
pd.set_option('display.max_colwidth', 40)  # set maximum column width to 40 characters
print()
print(selected_rows_loc)

# using .iloc[] to select rows by integer index

row_2 = df.iloc[19]
print("\nSelected row with integer index 19:")
print(row_2)

# selecting multiple rows with integer indices 156 and 33

selected_rows_iloc = df.iloc[[156, 33]]
print("\nSelected rows with integer indices 156 and 33 using .iloc[]:")
print(selected_rows_iloc)

# sorting data

sort_1970 = df.sort_values(by=1970, ascending = False) # sort data on 2022 population in asscending order

print("\nTable sorted by population numbers from 1970:")
print()
pd.set_option('display.expand_frame_repr', False)
print(sort_1970)

# grouping data

grouped_data = df.groupby('Continent').agg({2020: 'sum'}) # grouping the data by continent, calculating total population for 2020 for each continent
print("\nTotal population by continent in 2020:")
print()
print(grouped_data)

# applying basic filter

filtered_data = df[df.Continent == 'Europe'] # filter data for population in Europe only
print("\nPopulation in Europe:")
print()
pd.set_option('display.expand_frame_repr', False)
print(filtered_data)

# applying multiple filters

multi_filter_data = df[(df.Continent == 'Asia') & (df.Rank >= 100)] # showing countries in Asia ranking 100+ on the list
print(multi_filter_data)

# filtering using query method

query_filter = df.query("Rank < 60 and Continent == 'North America'") # showing countries from North America ranking less than 60 on the list
print(query_filter)

# using matplotlib to create a line chart showing the change in population for each continent over time

line_continent_group = df.groupby('Continent').sum().drop(['Rank', 'CCA3', 'Country', 'Capital', 'Area (km²)', 'Density (per km²)', 'Growth Rate', 'World Population Percentage (2022)'], axis = 1)
line_continent_group = line_continent_group.T # switching rows and columns for better visualisation

plt.figure(figsize=(15, 6))
for continent in line_continent_group.columns:
  plt.plot(line_continent_group.index, line_continent_group[continent], marker = 'o', label = continent)

plt.title('World population over time by continent')
plt.xlabel('')
plt.ylabel('Population in billions')
plt.legend()
plt.tight_layout()
plt.grid(True)
plt.show()

# using seaborn to create a bar chart visualising population for every continent

total_population_2022 = df.groupby('Continent')[2022].sum().reset_index() # grouping data by continent and suming the population numbers for 2022

plt.figure(figsize=(8, 6))
sns.barplot(x = 'Continent', y = 2022, data = total_population_2022, palette = 'muted')
warnings.filterwarnings("ignore", category = FutureWarning) # there was some strange warning regarding pallette in seaborn, got to remove it
plt.title('Total population by continent')
plt.xlabel('')
plt.ylabel('Population in billions')
plt.show()

# exporting to CSV

df.to_csv('population_database.csv', index=False)