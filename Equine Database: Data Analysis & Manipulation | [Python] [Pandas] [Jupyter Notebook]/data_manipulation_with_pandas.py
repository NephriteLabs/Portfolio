# -*- coding: utf-8 -*-
"""Denys-Bukariev_Week-6_Data-Manipulation-With-Pandas_17-04-2024.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1csGDdN4GhyPpqGI9j9N-RLlXJMvbFlzA
"""

# importing pandas library in python

import pandas as pd

# creating a database

database =  {'Breed': ['Arabian', 'Thoroughbred', 'American Quarter Horse', 'Friesian', 'Andalusian'],
             'Origin': ['Arabian Peninsula', 'England', 'United States', 'Netherlands', 'Spain'],
             'Height': [142, 163, 152, 155, 157],  # shown in centimeters
             'Weight': [408, 498, 544, 589, 498],  # shown in kilograms
             'Temperament': ['Energetic and alert', 'Energetic and spirited', 'Gentle and willing', 'Gentle and calm', 'Noble and docile'],
             'Historical Significance': ['Ancient breed known for endurance', 'Developed for horse racing', 'Developed for short-distance racing and cattle work', 'One of the oldest European horse breeds', 'Historically used in warfare and dressage'],
             'Description': ['Known for endurance and stamina', 'Known for speed and agility', 'Known for versatility and speed over short distances', 'Known for its elegant appearance and gentle temperament', 'Known for its athleticism and versatility']}

# adding DataFrame to the table together with the formatting specs

horses_df = pd.DataFrame(database)
pd.set_option('display.expand_frame_repr', False) # expanding the table to show it in one row
pd.set_option('display.max_colwidth', 40)  # set maximum column width to 40 characters
print(horses_df)

# displaying the first 3 rows of the DataFrame using head function

print(horses_df.head(3))

# displaying the last 2 rows of the DataFrame using tail function

print(horses_df.tail(2))

# summary statistics of numerical columns in the dataset using describe function

print(horses_df.describe())

# accessing an Origin column

name_column = horses_df['Origin']
print(name_column)

# accessing third row using .loc[]

row_3 = horses_df.loc[2]
pd.set_option('display.max_colwidth', None)  # show full content of columns
print(row_3)

# accessing second value in the Temperament column using .loc[]

column = 'Temperament'
index = 2
temperament_value = horses_df.loc[index, column]
print(f"Accessing the {column} value of the row with index {index}:")
print() # adding a blank line for formatting purposes
print(temperament_value)

# accessing first row using .iloc[]

row_1 = horses_df.iloc[0]
print(row_1)

# finding horses that are usually found in England using .iloc[]

england_row_index = horses_df[horses_df['Origin'] == 'England'].index[0] # locating the index of the row where the 'Origin' column has the value 'England'
england_origin = horses_df.at[england_row_index, 'Origin'] # getting the value of the 'Origin' column for horses from England
england_horse_info = horses_df.loc[england_row_index] # getting info on horses from England

print(f"These horses are usually found in {england_origin}:")
print()
print(england_horse_info)

# selecting Breed column using square brackets

breed_column = horses_df['Breed']
print("Selected 'Breed' column:")
print()
print(name_column)

# selecting multiple columns, Breed and Description

selected_columns = horses_df[['Breed', 'Description']]
print("\nSelected Breed and Description columns:")
pd.set_option('display.max_colwidth', None)  # show full content of columns
print()
print(selected_columns)

# selecting multiple rows with indices 0 and 4

selected_rows_loc = horses_df.loc[[0, 4]]
print("\nSelected rows with indices 0 and 4 using .loc[]:")
pd.set_option('display.max_colwidth', 40)  # set maximum column width to 40 characters
print()
print(selected_rows_loc)

# using .iloc[] to select rows by integer index

row_2 = horses_df.iloc[1]
print("\nSelected row with integer index 1:")
print(row_2)

# selecting multiple rows with integer indices 1 and 3

selected_rows_iloc = horses_df.iloc[[1, 3]]
print("\nSelected rows with integer indices 1 and 3 using .iloc[]:")
print(selected_rows_iloc)

# assigning values to a new column Colour

horses_df['Colour'] = ['Black', 'Chestnut', 'Grey', 'Brown', 'White']
pd.set_option('display.max_colwidth', 40)  # set maximum column width to 40 characters
print("\nDataFrame with a new column Colour:")
print()
print(horses_df)

# assigning new value to row 4 in Colour column using .loc[]

horses_df.loc[4, ['Colour']] = ['Golden']
print("\nDataFrame after updating values for row with index 4:")
print(horses_df)

# sorting data

# sorted_weight = horses_df.sort_values(by='Weight', ascending=True) # sort data on average horse weight in ascending order
sorted_height = horses_df.sort_values(by='Height', ascending=False) # sort data on average horse height in descending order

# print("\nAverage horse weight sorted in ascending order:")
print("\nAverage horse height sorted in descending order:")

print()
pd.set_option('display.expand_frame_repr', False)
print(sorted_height)

# grouping data

grouped_data = horses_df.groupby('Origin').agg({'Height': 'max'}) # grouping the data by origin, calculating the maximum value of the Height column for each group
print("\nGrouped data with aggregate statistics:")
print()
print(grouped_data)

# applying basic filter

filtered_data = horses_df[horses_df.Temperament != 'Energetic and alert'] # filter data for a horse with temperament other than Energetic and alert
print("\nPick these horses:")
print()
pd.set_option('display.expand_frame_repr', False)
print(filtered_data)

# applying multiple filters

multi_filter_data = horses_df[(horses_df['Origin'] == 'England') | (horses_df['Weight'] > 500)] #applying multiple filter to show horses which Origin is either England or their weight is over 500 kg
print(multi_filter_data)

# using query method

query_filter = horses_df.query("Weight > 560 and Temperament != 'Developed'")
print(query_filter)

# exporting DataFrame to CSV and Excel formats

horses_df.to_csv('horses_database.csv', index=False)
# horses_df.to_excel('horses_database.xlsx', index=False, sheet_name='Sheet1')